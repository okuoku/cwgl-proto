#
# INPUTs:
#   IN: full path to data
#  OUT: full path to .cmake
#
cmake_policy(SET CMP0054 NEW)

if(NOT IN)
    message(FATAL_ERROR "Huh?")
endif()

if(NOT OUT)
    message(FATAL_ERROR "Huh?")
endif()

include(${IN})

set(imports)
set(exports)
set(importidx 0)
set(exportidx 0)

macro(count var)
    math(EXPR ${var} "${${var}}+1")
endmacro()

function(decodename out nam)
    set(q ${nam})
    set(acc)
    while(1)
        if("${q}" MATCHES "Z(..)(.*)")
            set(q ${CMAKE_MATCH_2})
            set(hex ${CMAKE_MATCH_1})
            math(EXPR dec "0x${hex}")
            string(ASCII ${dec} c)
            set(acc "${acc}${c}")
        elseif("${q}" MATCHES "([^Z])(.*)")
            set(q ${CMAKE_MATCH_2})
            set(acc "${acc}${CMAKE_MATCH_1}")
        else()
            break()
        endif()
    endwhile()
    set(${out} ${acc} PARENT_SCOPE)
endfunction()

function(splitexportvarname nam out)
    if(nam MATCHES "Z_(.+)")
        set(p1 ${CMAKE_MATCH_1})
        decodename(o1 ${p1})
        set(${out} ${o1} PARENT_SCOPE)
    else()
        message(FATAL_ERROR "Invalid export name: ${nam}")
    endif()
endfunction()

function(splitexportfuncname nam out1 out2)
    if(nam MATCHES "Z_([^Z]+)Z_(.*)")
        set(p1 ${CMAKE_MATCH_1})
        set(p2 ${CMAKE_MATCH_2})
        decodename(o1 ${p1})
        decodename(o2 ${p2})
        set(${out1} ${o1} PARENT_SCOPE)
        set(${out2} ${o2} PARENT_SCOPE)
    else()
        message(FATAL_ERROR "Unrecognised name: ${nam}")
    endif()
endfunction()

function(splitimportname nam out1 out2 out3)
    if(nam MATCHES "Z_([^Z]+)Z_([^Z]+)Z_(.*)")
        set(p1 ${CMAKE_MATCH_1})
        set(p2 ${CMAKE_MATCH_2})
        set(p3 ${CMAKE_MATCH_3})
        decodename(o1 ${p1})
        decodename(o2 ${p2})
        decodename(o3 ${p3})
        set(${out1} ${o1} PARENT_SCOPE)
        set(${out2} ${o2} PARENT_SCOPE)
        set(${out3} ${o3} PARENT_SCOPE)
    else()
        message(FATAL_ERROR "Unrecognised name: ${nam}")
    endif()
endfunction()

file(WRITE ${OUT} "# Autogenerated\n\n")

foreach(s ${syms})
    set(type ${sym_${s}_symtype})
    if(${type} STREQUAL IMPORT_FUNCTION)
        splitimportname(${s} n1 n2 n3)
        file(APPEND ${OUT} "set(sym_${s}_importidx ${importidx})\n")
        file(APPEND ${OUT} "set(sym_${s}_importname1 ${n1})\n")
        file(APPEND ${OUT} "set(sym_${s}_importname2 ${n2})\n")
        file(APPEND ${OUT} "set(sym_${s}_jsname ${n3})\n")
        count(importidx)
    elseif(${type} STREQUAL IMPORT_VARIABLE)
        splitimportname(${s} n1 n2 n3)
        file(APPEND ${OUT} "set(sym_${s}_importidx ${importidx})\n")
        file(APPEND ${OUT} "set(sym_${s}_importname1 ${n1})\n")
        file(APPEND ${OUT} "set(sym_${s}_importname2 ${n2})\n")
        file(APPEND ${OUT} "set(sym_${s}_jsname ${n3})\n")
        count(importidx)
    elseif(${type} STREQUAL EXPORT_FUNCTION)
        splitexportfuncname(${s} s0 s1)
        decodename(sn ${s0})
        file(APPEND ${OUT} "set(sym_${s}_exportidx ${exportidx})\n")
        file(APPEND ${OUT} "set(sym_${s}_jsname ${sn})\n")
        count(exportidx)
    elseif(${type} STREQUAL EXPORT_VARIABLE)
        splitexportvarname(${s} s0)
        decodename(sn ${s0})
        file(APPEND ${OUT} "set(sym_${s}_exportidx ${exportidx})\n")
        file(APPEND ${OUT} "set(sym_${s}_jsname ${sn})\n")
        count(exportidx)
    else()
        message(FATAL_ERROR "Unknown symbol type: ${s}")
    endif()
endforeach()

file(APPEND ${OUT} "\n\n")
file(APPEND ${OUT} "set(symtotal_imports ${importidx})\n")
file(APPEND ${OUT} "set(symtotal_exports ${exportidx})\n")
